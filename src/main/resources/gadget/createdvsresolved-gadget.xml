<?xml version="1.0" encoding="UTF-8" ?>

<Module>
    <ModulePrefs title="Capacity Chart" directory_title="Capacity Chart" description="Capacity Chart"
                 author="Megaplan" author_affiliation="Megaplan"
                 author_location="Moscow, Russia" height="100"
                 screenshot='#staticResourceUrl("ru.megaplan.jira.plugins.work-capacity:capacity-chart-gadget", "capacity-screenshot.png")'
                 thumbnail='#staticResourceUrl("ru.megaplan.jira.plugins.work-capacity:capacity-chart-gadget", "capacity-thumb.png")'>
        <Optional feature="gadget-directory">
            <Param name="categories">
                JIRA
                Charts
            </Param>
        </Optional>
        <Require feature="setprefs" />
        <Require feature="settitle"/>
        <Require feature="dynamic-height"/>
        <Require feature="views" />
        <Optional feature="atlassian.util" />
        <Optional feature='auth-refresh' />
        <Require feature="oauthpopup" />
        #oauth
        #supportedLocales("gadget.common,gadget.created.vs.resolved")
    </ModulePrefs>
    <UserPref name="isConfigured" datatype="hidden" default_value="false" />
    <UserPref name="isPopup" datatype="hidden" default_value="false"/>
    <UserPref name="refresh" datatype="hidden" default_value="false"/>
    <UserPref name="projectOrFilterId" datatype="hidden" />
    <UserPref name="daysprevious" datatype="hidden" default_value="30"/>
    <UserPref name="daysafter" datatype="hidden" default_value="0"/>
    <UserPref name="periodName" datatype="hidden" default_value="daily"/>
    <UserPref name="versionLabel" datatype="hidden" default_value="major"/>
    <UserPref name="isCumulative" datatype="hidden" default_value="30"/>
    <UserPref name="statusIn" datatype="hidden" default_value="0"/>
    <UserPref name="mergeStatuses" datatype="hidden" default_value="true"/>
    <UserPref name="countOldFacts" datatype="hidden" default_value="true"/>
    <UserPref name="assignees" datatype="hidden" default_value="NULL"/>
    <UserPref name="showUnresolvedTrend" datatype="hidden" default_value="false"/>
    <UserPref name="title" datatype="hidden"/>

    <Content type="html" view="profile,canvas,home">
        <![CDATA[

        #requireResource("com.atlassian.jira.gadgets:autocomplete")
        #requireResource("ru.megaplan.jira.plugins.work-capacity:statusUserPickers")
        #includeResources()

        <script type="text/javascript">
            gadgets.window.setTitle("Work Capacity");
            AJS.Gadget({
                baseUrl: "__ATLASSIAN_BASE_URL__",
                useOauth: "/rest/gadget/1.0/currentUser",
                config: {
                    descriptor: function (args) {
                        var gadget = this;
                        var searchParam ;
                        if (/^jql-/.test(this.getPref("projectOrFilterId")) || this.getPref("isPopup") === "true"){
                            searchParam =
                                {
                                    userpref: "projectOrFilterId",
                                    type: "hidden",
                                    value: gadgets.util.unescapeString(this.getPref("projectOrFilterId"))
                                };
                        }
                        else{
                            searchParam = AJS.gadget.fields.projectOrFilterPicker(gadget, "projectOrFilterId");
                        }

                        return  {
                            action: "/rest/mpsgadget/1.0/capacity/validate",
                            theme : function(){
                                if (gadgets.window.getViewportDimensions().width < 450){
                                        return "gdt top-label";
                                    }
                                    else
                                    {
                                        return "gdt";
                                    }
                            }(),
                            fields: [
                                {
                                    id: "title",
                                    userpref: "title",
                                    label: "Название окошка",
                                    description: "Будет отображаться при просмотре. Не даст перепутать.",
                                    type: "text",
                                    value: this.getPref("title")
                                },
                                searchParam,
                                AJS.gadget.fields.period(gadget, "periodName"),
                                AJS.gadget.fields.days(gadget, "daysprevious"),
                                AJS.gadget.fields.days(gadget, "daysafter", {label: "Days Lately", description: "Days to cut from end"}),
                                AJS.gadget.fields.cumulative(gadget, "isCumulative"),
                                GB.gadget.fields.statusPicker(gadget, "statusIn", args.statuses, "Statuses"),
                                {
                                    userpref: "mergeStatuses",
                                    label: "Merge",
                                    description: "Merge Statuses and Assignees",
                                    type: "select",
                                    selected: this.getPref("mergeStatuses"),
                                    options:[
                                        {
                                            label:this.getMsg("gadget.common.yes"),
                                            value:"true"
                                        },
                                        {
                                            label:this.getMsg("gadget.common.no"),
                                            value:"false"
                                        }
                                    ]
                                },
                                {
                                    userpref: "countOldFacts",
                                    label: "Учитывать старые факты",
                                    type: "select",
                                    selected: this.getPref("countOldFacts"),
                                    options:[
                                        {
                                            label:this.getMsg("gadget.common.yes"),
                                            value:"true"
                                        },
                                        {
                                            label:this.getMsg("gadget.common.no"),
                                            value:"false"
                                        }
                                    ]
                                },
                                GB.gadget.fields.userPicker(gadget, "assignees", args.assignees, "Assignees"),
                                {
                                    userpref: "showUnresolvedTrend",
                                    label: this.getMsg("gadget.created.vs.resolved.trend.label"),
                                    description:this.getMsg("gadget.created.vs.resolved.trend.description"),
                                    type: "select",
                                    selected: this.getPref("showUnresolvedTrend"),
                                    options:[
                                        {
                                            label:this.getMsg("gadget.common.yes"),
                                            value:"true"
                                        },
                                        {
                                            label:this.getMsg("gadget.common.no"),
                                            value:"false"
                                        }
                                    ]
                                },
                                {
                                    userpref: "versionLabel",
                                    label: this.getMsg("gadget.created.vs.resolved.version.label"),
                                    description:this.getMsg("gadget.created.vs.resolved.version.description"),
                                    type: "select",
                                    selected: this.getPref("versionLabel"),
                                    options:[
                                        {
                                            label:this.getMsg("gadget.created.vs.resolved.version.all"),
                                            value:"all"
                                        },
                                        {
                                            label:this.getMsg("gadget.created.vs.resolved.version.major"),
                                            value:"major"
                                        },
                                        {
                                            label:this.getMsg("gadget.created.vs.resolved.version.none"),
                                            value:"none"
                                        }
                                    ]
                                },
                                AJS.gadget.fields.nowConfigured()

                            ]
                        };
                    },
                    args: function() {
                        return [
                            {
                                key: "statuses",
                                ajaxOptions: "/rest/mpsgadget/latest/status/all"
                            },
                            {
                                key: "assignees",
                                ajaxOptions: "/rest/mpsgadget/latest/assignee/allActive"
                            }
                        ];
                    }()
                },
                view: {
                    enableReload: true,
                    onResizeReload: true,
                    template: function (args) {
                        var gadget = this;

                        // reset view
                        gadget.getView().addClass("chart").empty();
                        gadget.getView().addClass("g-created-resolved");

                        var requiresTitle = function() {
                            return args.chart.filterTitle && args.chart.filterTitle !== "" && args.chart.filterTitle !== "gadget.common.anonymous.filter" && gadget.getPref("isPopup") === "false";
                        };

                        var setTitles = function () {
                            if (requiresTitle()){
                                // This is used to pass the name of filter or project to the picker
                                gadget.projectOrFilterName = "Project or filter name";//args.chart.filterTitle;

                                gadgets.window.setTitle(gadget.getPref("title")?gadget.getPref("title"):AJS.format("Work Capacity", args.chart.filterTitle));
                            }
                        }();

                        var getChartContainer = function () {
                            var chart = AJS.$("<div id='chart' />").appendTo(gadget.getView());
                            return function () {
                                return chart;
                            };
                        }();

                        var safeEscapeString = function(text) {
                            if(text) {
                                return gadgets.util.escapeString(text);
                            } else {
                                return '';
                            }
                        };

                        var getChartImg = function () {
                            AJS.$("#chart", gadget.getView()).get(0).innerHTML += "<img style='display:none' src='" + gadget.getBaseUrl() + "/charts?filename=" + args.chart.location + "' alt='" + safeEscapeString(args.chart.filterTitle) + "' usemap='#" +
                            args.chart.imageMapName + "' height='" + args.chart.height + "' width='" + args.chart.width + "' />";
                            gadget.getView().append(args.chart.imageMap);
                            gadget.showLoading();
                            var chartImg = AJS.$("img", getChartContainer());
                            AJS.$(chartImg, gadget.getView()).load(function () {
                                AJS.$(this).show();
                                gadget.hideLoading();
                                gadget.resize();
                            });
                            return function () {
                                return chartImg;
                            };
                        }();

                        var setSummary = function() {
                            var linkStart = "";
                            var linkEnd = "";
                            if(requiresTitle()) {
                                linkStart = "<a href=\"__ATLASSIAN_BASE_URL__" + args.chart.filterUrl + "\" target=\"_parent\" title=\"" + safeEscapeString(args.chart.filterTitle) + "\">";
                                linkEnd = "</a>";
                            }
                            getChartContainer().append(
                                AJS.$("<p/>").append(AJS.format("{0}Факты{1}: {2}{3}{4} вошло и {5}{6}{7} вышло", linkStart, linkEnd, "<span class=\"created\"><strong>", args.chart.issuesCreated, "</strong></span>", "<span class=\"resolved\"><strong>", args.chart.issuesResolved, "</strong></span>"))
                            ).append(
                                AJS.$("<p/>").append(AJS.format("__MSG_gadget.common.chart.period__", "<span><strong>", gadget.getPref("daysprevious"), "</strong></span>",
                                "<span><strong>", gadget.getMsg("gadget.common.period." + gadget.getPref("periodName")), "</strong></span>"))
                            );
                            if (gadget.getPref("daysafter") !== "0") {
                                getChartContainer().append("and days cut : " + gadget.getPref("daysafter"));
                            }
                        }();

                        if (gadgets.views.getCurrentView().getName() === "canvas") {
                            var dataTable = AJS.gadgets.templater.Table ({
                                descriptor: function (args) {
                                    if (gadget.getPref("showUnresolvedTrend") === "true"){
                                        return {
                                            cols: [
                                                {header: gadget.getMsg("gadget.common.period.name"), preSorted: true, sort: "asc"},
                                                {header: gadget.getMsg("gadget.created.vs.resolved.created")},
                                                {header: gadget.getMsg("gadget.created.vs.resolved.resolved")},
                                                {header: gadget.getMsg("gadget.created.vs.resolved.trend")}
                                            ],
                                            data: function () {
                                                var rows = [];
                                                AJS.$(args.chartData).each(function (i) {
                                                    var resolvedLabel = "";
                                                    var createdLabel = "";
                                                    if (gadget.getPref("isCumulative") == "false") {
                                                        resolvedLabel = "<a href='" + this.resolvedUrl + "'>" + this.resolvedValue + "</a>";
                                                        createdLabel = "<a href='" + this.createdUrl + "'>" + this.createdValue + "</a>";
                                                    }
                                                    else {
                                                        resolvedLabel = this.resolvedValue;
                                                        createdLabel = this.createdValue;
                                                    }

                                                    rows.push([
                                                        {value: i, label: this.key},
                                                        {value: this.createdValue, label: createdLabel},
                                                        {value: this.resolvedValue, label: resolvedLabel},
                                                        {value: this.trendCount, label: this.trendCount}
                                                    ]);
                                                });
                                                return rows;
                                            }()
                                        };

                                    } else{
                                        return {
                                            cols: [
                                                {header: gadget.getMsg("gadget.common.period.name"), preSorted: true, sort: "asc"},
                                                {header: gadget.getMsg("gadget.created.vs.resolved.created")},
                                                {header: gadget.getMsg("gadget.created.vs.resolved.resolved")}
                                            ],
                                            data: function () {
                                                var rows = [];
                                                AJS.$(args.chartData).each(function (i) {
                                                    var resolvedLabel = "";
                                                    var createdLabel = "";
                                                    if (gadget.getPref("isCumulative") == "false") {
                                                        resolvedLabel = "<a href='" + this.resolvedUrl + "'>" + this.resolvedValue + "</a>";
                                                        createdLabel = "<a href='" + this.createdUrl + "'>" + this.createdValue + "</a>";
                                                    }
                                                    else {
                                                        resolvedLabel = this.resolvedValue;
                                                        createdLabel = this.createdValue;
                                                    }
                                                    rows.push([
                                                        {value: i, label: this.key},
                                                        {value: this.createdValue, label: createdLabel},
                                                        {value: this.resolvedValue, label: resolvedLabel}
                                                    ]);
                                                });
                                                return rows;
                                            }()
                                        };
                                    }
                                },
                                sortable: true,
                                args: [{key: "chartData", data: args.chart.data}]
                            });

                            var getDataTable = function () {
                                return AJS.$("table.aui", gadget.getView());
                            };

                            var createCanvasDataTable = function () {
                                dataTable.addCallback(function (fragment) {
                                    gadget.getView().append(fragment);
                                    gadget.resize();
                                });
                                dataTable.build();
                            };

                            // finally after the image has loaded we create the data table
                            getChartImg().load(createCanvasDataTable);
                    }

                    },
                    args: [{
                        key: "chart",
                        ajaxOptions: function () {
                            var width = Math.round(gadgets.window.getViewportDimensions().width * 0.9);
                            //canvas mode needs some more room to the right for the data table.
                            if(gadgets.views.getCurrentView().getName() === "canvas") {
                                width = Math.round(gadgets.window.getViewportDimensions().width * 0.6);
                            }
                            if (width < 150){
                                width = 150;
                            }
                            var height = Math.round(width*2/3);

                            if (gadgets.views.getCurrentView().getName() === "canvas") {
                                return {
                                    url: "/rest/mpsgadget/1.0/capacity/generate",
                                    data:  {
                                        projectOrFilterId: gadgets.util.unescapeString(this.getPref("projectOrFilterId")),
                                        periodName: this.getPref("periodName"),
                                        daysprevious: this.getPref("daysprevious"),
                                        daysafter: this.getPref("daysafter"),
                                        isCumulative: this.getPref("isCumulative"),
                                        showUnresolvedTrend: this.getPref("showUnresolvedTrend"),
                                        versionLabel: this.getPref("versionLabel"),
                                        width: Math.round(width * 0.8),
                                        height: Math.round(height * 0.8),
                                        returnData: true,
                                        statusesIn: this.getPref("statusIn"),
                                        mergeStatuses: this.getPref("mergeStatuses"),
                                        assignees: this.getPref("assignees"),
                                    }
                                };
                            } else {
                                return {
                                    url: "/rest/mpsgadget/1.0/capacity/generate",
                                    data:  {
                                        projectOrFilterId: gadgets.util.unescapeString(this.getPref("projectOrFilterId")),
                                        periodName: this.getPref("periodName"),
                                        daysprevious: this.getPref("daysprevious"),
                                        daysafter: this.getPref("daysafter"),
                                        isCumulative: this.getPref("isCumulative"),
                                        showUnresolvedTrend: this.getPref("showUnresolvedTrend"),
                                        versionLabel: this.getPref("versionLabel"),
                                        width: width,
                                        height: height,
                                        statusesIn: this.getPref("statusIn"),
                                        mergeStatuses: this.getPref("mergeStatuses"),
                                        countOldFacts: this.getPref("countOldFacts"),
                                        assignees: this.getPref("assignees"),
                                    }
                                };

                            }
                        }
                    }]
                }
            });
        </script>


        ]]>
    </Content>
</Module>
