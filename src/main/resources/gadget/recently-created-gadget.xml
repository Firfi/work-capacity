<?xml version="1.0" encoding="UTF-8" ?>

<Module>
    <ModulePrefs title="Capacity History Chart" directory_title="Capacity History Chart"
                 description="Capacity History Chart for puncha yo buns"
                 author="Megaplan" author_affiliation="Megaplan"
                 author_location="Moscow, Russia" height="100"
                 screenshot='#staticResourceUrl("ru.megaplan.jira.plugins.work-capacity:capacity-history-chart-gadget", "capacity-history-screenshot.png")'
                 thumbnail='#staticResourceUrl("ru.megaplan.jira.plugins.work-capacity:capacity-history-chart-gadget", "capacity-history-thumb.png")'>
        <Optional feature="gadget-directory">
            <Param name="categories">
                JIRA
                Charts
            </Param>
        </Optional>
        <Require feature="setprefs"/>
        <Require feature="settitle"/>
        <Require feature="dynamic-height"/>
        <Require feature="views" />
        <Optional feature="atlassian.util" />
        <Optional feature='auth-refresh' />
        <Require feature="oauthpopup"/>
        #oauth
        #supportedLocales("gadget.common,gadget.recently.created")
    </ModulePrefs>
    <UserPref name="isConfigured" datatype="hidden" default_value="false"/>
    <UserPref name="isPopup" datatype="hidden" default_value="false"/>
    <UserPref name="refresh" datatype="hidden" default_value="false"/>
    <UserPref name="projectOrFilterId" datatype="hidden"/>
    <UserPref name="daysprevious" datatype="hidden" default_value="30"/>
    <UserPref name="daysafter" datatype="hidden" default_value="0"/>
    <UserPref name="statusIn" datatype="hidden" default_value="0"/>
    <UserPref name="mergeStatuses" datatype="hidden" default_value="true"/>
    <UserPref name="assignees" datatype="hidden" default_value="NULL"/>
    <UserPref name="showUnresolvedTrend" datatype="hidden" default_value="false"/>
    <UserPref name="periodName" datatype="hidden" default_value="daily"/>
    <UserPref name="title" datatype="hidden"/>

    <Content type="html" view="profile,canvas,home">
        <![CDATA[

        #requireResource("com.atlassian.jira.gadgets:autocomplete")
        #requireResource("ru.megaplan.jira.plugins.work-capacity:statusUserPickers")
        #includeResources()

        <script type="text/javascript">
        gadgets.window.setTitle("Work Capacity History");
        AJS.Gadget({
            baseUrl: "__ATLASSIAN_BASE_URL__",
            useOauth: "/rest/gadget/1.0/currentUser",
            config: {
                descriptor: function (args)
                {
                    var gadget = this;
                    var searchParam ;
                    if (/^jql-/.test(this.getPref("projectOrFilterId")) || this.getPref("isPopup") === "true")
                    {
                        searchParam =
                        {
                            userpref: "projectOrFilterId",
                            type: "hidden",
                            value: gadgets.util.unescapeString(this.getPref("projectOrFilterId"))
                        };
                    }
                    else
                    {
                        searchParam = AJS.gadget.fields.projectOrFilterPicker(gadget, "projectOrFilterId", args.options);
                    }

                    return  {
                        action: "/rest/mpsgadget/1.0/capacityHistory/validate",
                        theme : function()
                        {
                            if (gadgets.window.getViewportDimensions().width < 450){
                                return "gdt top-label";
                            }
                            else
                            {
                                return "gdt";
                            }
                        }(),
                        fields: [
                            {
                                id: "title",
                                userpref: "title",
                                label: "Название окошка",
                                description: "Будет отображаться при просмотре. Не даст перепутать.",
                                type: "text",
                                value: this.getPref("title")
                            },
                            searchParam,
                            AJS.gadget.fields.period(gadget, "periodName"),
                            AJS.gadget.fields.days(gadget, "daysprevious"),
                            AJS.gadget.fields.days(gadget, "daysafter", {label: "Days Lately", description: "Days to cut from end"}),
                            GB.gadget.fields.statusPicker(gadget, "statusIn", args.statuses, "Statuses"),
                            {
                                userpref: "mergeStatuses",
                                label: "Merge",
                                description: "Merge Statuses and Assignees",
                                type: "select",
                                selected: this.getPref("mergeStatuses"),
                                options:[
                                    {
                                        label:this.getMsg("gadget.common.yes"),
                                        value:"true"
                                    },
                                    {
                                        label:this.getMsg("gadget.common.no"),
                                        value:"false"
                                    }
                                ]
                            },
                            GB.gadget.fields.userPicker(gadget, "assignees", args.assignees, "Assignees"),
                             {
                                userpref: "showUnresolvedTrend",
                                label: "Показывать тренд",
                                type: "select",
                                selected: this.getPref("showUnresolvedTrend"),
                                options:[
                                    {
                                        label:this.getMsg("gadget.common.yes"),
                                        value:"true"
                                    },
                                    {
                                        label:this.getMsg("gadget.common.no"),
                                        value:"false"
                                    }
                                ]
                            },
                            AJS.gadget.fields.nowConfigured()
                        ]
                    };
                },
                 args: function() {
                    return [
                        {
                            key: "statuses",
                            ajaxOptions: "/rest/mpsgadget/latest/status/all"
                        },
                        {
                            key: "assignees",
                            ajaxOptions: "/rest/mpsgadget/latest/assignee/allActive"
                        }
                    ];
                }()
            },
            view: {
                enableReload: true,
                onResizeReload: true,
                template: function (args)
                {
                    var gadget = this;
                    gadget.getView().addClass("g-recently-created");
                    this.getView().addClass("chart").empty();

                    //var requiresTitle = function() {
                    //    return args.chart.filterTitle && args.chart.filterTitle !== "" && args.chart.filterTitle !== "gadget.common.anonymous.filter" && gadget.getPref("isPopup") === "false";
                    //};

                    //if (requiresTitle())
                    //{
                        // This is used to pass the name of filter or project to the picker
                        gadget.projectOrFilterName = args.chart.filterTitle;

                        gadgets.window.setTitle(gadget.getPref("title")?gadget.getPref("title"):AJS.format("Work Capacity History", args.chart.filterTitle));
                    //}
                    //else
                   // {
                    //    this.getView().html("");
                   // }

                    var getChartContainer = function ()
                    {
                        var chart = AJS.$("<div id='chart' />").appendTo(gadget.getView());
                        return function ()
                        {
                            return chart;
                        };
                    }();

                    var safeEscapeString = function(text) {
                        if(text) {
                            return gadgets.util.escapeString(text);
                        } else {
                            return '';
                        }
                    };

                    var getChartImg = function ()
                    {
                        gadget.showLoading();
                        var chartImg = AJS.$("<img"
                                +" usemap=#"+args.chart.imageMapName
                                +" src="+ gadget.getBaseUrl() + "/charts?filename=" + args.chart.location
                                +" alt="+safeEscapeString(args.chart.filterTitle)
                                +" width="+args.chart.width
                                +" height="+args.chart.height
                                             +" />").hide();

                        chartImg.load(function()
                        {
                            chartImg.show();
                            gadget.hideLoading();
                            gadget.resize(); //AJS.$("body").outerHeight());
                        });

                        gadget.getView().append(args.chart.imageMap);
                        AJS.$("area").each(function()
                        {
                            var $this = AJS.$(this);
                            if ($this.attr("href"))
                            {
                                $this.attr({
                                    target: "_parent",
                                    href: $this.attr("href")
                                });
                            }
                        });

                        AJS.$("#chart", gadget.getView()).append(chartImg);
                        return function ()
                        {
                            return chartImg;
                        };
                    }();

                    var linkStart = "";
                    var linkEnd = "";
                    //if(requiresTitle()) {
                    //    linkStart = "<a href=\"__ATLASSIAN_BASE_URL__" + args.chart.filterUrl + "\" target=\"_parent\" title=\"" + safeEscapeString(args.chart.filterTitle) + "\">";
                    //    linkEnd = "</a>";
                    //}
                    getChartContainer().append(
                           AJS.$("<p/>").append(AJS.format("__MSG_gadget.recently.created.issues__", linkStart, "<span><strong>", args.chart.issueCount, "</strong></span>", linkEnd)))
                           .append(AJS.$("<p/>").append(AJS.format("__MSG_gadget.common.chart.period__", "<span><strong>", gadget.getPref("daysprevious"), "</strong></span>", "<span><strong>", gadget.getMsg("gadget.common.period." + gadget.getPref("periodName")), "</strong></span>")));
                    if (gadget.getPref("daysafter") !== "0") {
                        getChartContainer().append("and days cut : " + gadget.getPref("daysafter"));
                    }

                    if (gadgets.views.getCurrentView().getName() === "canvas")
                    {
                        var dataTable = AJS.gadgets.templater.Table({
                            descriptor: function (args)
                            {
                                return {
                                    cols: [
                                        {
                                            header: gadget.getMsg("gadget.common.period.name"),
                                            preSorted: true,
                                            sort: "asc"
                                        },
                                        {
                                            header: gadget.getMsg("gadget.recently.created.issues.resolved")
                                        },
                                        {
                                            header: gadget.getMsg("gadget.recently.created.issues.unresolved")
                                        },
                                        {
                                            header: gadget.getMsg("gadget.recently.created.issues.created")
                                        }
                                    ],
                                    data: function ()
                                    {
                                        var rows = [];
                                        AJS.$(args.chartData).each(function (i)
                                        {
                                            rows.push([
                                                {
                                                    value: i,
                                                    label: this.key
                                                 },
                                                {
                                                    value: this.resolvedValue,
                                                    label: "<a href='" + this.resolvedUrl + "'>" + this.resolvedValue + "</a>"
                                                },
                                                {
                                                    value: this.unresolvedValue,
                                                    label: "<a href='" + this.unresolvedUrl + "'>" + this.unresolvedValue + "</a>"
                                                },
                                                {
                                                    value: this.createdValue,
                                                    label: this.createdValue
                                                }
                                            ]);
                                        });
                                        return rows;
                                    }()
                                };
                            },
                            sortable: true,
                            args: [
                                {
                                    key: "chartData",
                                    data: args.chart.data
                                }
                            ]
                        });

                        var getDataTable = function () {
                            return AJS.$("table.aui", gadget.getView());
                        };

                        var createCanvasDataTable = function () {
                            dataTable.addCallback(function (fragment) {
                                gadget.getView().append(fragment);
                                gadget.resize();
                            });
                            dataTable.build();
                        };
                        // finally after the image has loaded we create the data table
                    }
                    getChartImg().load(createCanvasDataTable);

                },
                args: [
                    {
                        key: "chart",
                        ajaxOptions: function ()
                        {
                            var width = Math.round(gadgets.window.getViewportDimensions().width * 0.9);
                            //canvas mode needs some more room to the right for the data table.
                            if(gadgets.views.getCurrentView().getName() === "canvas") {
                                width = Math.round(gadgets.window.getViewportDimensions().width * 0.6);
                            }
                            if (width < 150)
                            {
                                width = 150;
                            }
                            var height = Math.round(width * 2 / 3);

                            if (gadgets.views.getCurrentView().getName() === "canvas")
                            {
                                return {
                                    url: "/rest/mpsgadget/1.0/capacityHistory/generate",
                                    data:  {
                                        projectOrFilterId: gadgets.util.unescapeString(this.getPref("projectOrFilterId")),
                                        periodName: this.getPref("periodName"),
                                        daysprevious: this.getPref("daysprevious"),
                                        daysafter: this.getPref("daysafter"),
                                        showUnresolvedTrend: this.getPref("showUnresolvedTrend"),
                                        width: Math.round(width * 0.8),
                                        height: Math.round(height * 0.8),
                                        statusesIn: this.getPref("statusIn"),
                                        mergeStatuses: this.getPref("mergeStatuses"),
                                        assignees: this.getPref("assignees"),
                                        returnData: true
                                    }
                                };
                            }
                            else
                            {
                                return {
                                    url: "/rest/mpsgadget/1.0/capacityHistory/generate",
                                    data:  {
                                        projectOrFilterId: gadgets.util.unescapeString(this.getPref("projectOrFilterId")),
                                        periodName: this.getPref("periodName"),
                                        daysprevious: this.getPref("daysprevious"),
                                        daysafter: this.getPref("daysafter"),showUnresolvedTrend: this.getPref("showUnresolvedTrend"),
                                        showUnresolvedTrend: this.getPref("showUnresolvedTrend"),
                                        width: width,
                                        height: height,
                                        statusesIn: this.getPref("statusIn"),
                                        mergeStatuses: this.getPref("mergeStatuses"),
                                        assignees: this.getPref("assignees")
                                    }
                                };
                            }
                        }
                    }
                ]
            }
        });
        </script>


        ]]>
    </Content>
</Module>
